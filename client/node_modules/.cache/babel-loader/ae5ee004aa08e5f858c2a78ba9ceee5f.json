{"ast":null,"code":"var _jsxFileName = \"E:\\\\Axoms course\\\\Module B\\\\Mern Stack Projects\\\\contact-manager\\\\client\\\\src\\\\context\\\\auth\\\\AuthState.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from 'react';\nimport axios from 'axios';\nimport authContext from './authContext';\nimport authReducer from './authReducer';\nimport setAuthToken from '../../utils/setAuthToken';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, LOGIN_SUCCESS, LOGIN_FAIL, LOGINOUT, AUTH_ERROR, CLEAR_ERRORS } from '../types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst AuthState = props => {\n  _s();\n\n  const initialState = {\n    token: localStorage.getItem('token'),\n    //check the user login or not\n    isAuthentication: null,\n    // jb page loading hoga tu loading true our jab load ho jaya ga tu ladding false ho jay ga\n    loading: true,\n    // jis ko user ko hmna authenticate krna ha\n    user: null,\n    error: null\n  };\n  const [state, dispatch] = useReducer(authReducer, initialState); // Register Users\n\n  const register = async formData => {\n    //  we send a formData  in json format so we tell a axios we snd a json data so\n    // we define a config that contain the headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/users', formData, config);\n      dispatch({\n        type: REGISTER_SUCCESS,\n        payload: res.data\n      });\n      loadedUser();\n    } catch (err) {\n      dispatch({\n        type: REGISTER_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; //loaded user\n\n\n  const loadedUser = async () => {\n    if (localStorage.token) {\n      setAuthToken(localStorage.token);\n    }\n\n    try {\n      const res = await axios.get('/api/auth');\n      dispatch({\n        type: USER_LOADED,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: AUTH_ERROR\n      });\n    }\n  }; //login user\n  // Register Users\n\n\n  const Login = async formData => {\n    //  we send a formData  in json format so we tell a axios we snd a json data so\n    // we define a config that contain the headers\n    const config = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n\n    try {\n      const res = await axios.post('/api/auth', formData, config);\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: res.data\n      });\n    } catch (err) {\n      dispatch({\n        type: LOGIN_FAIL,\n        payload: err.response.data.msg\n      });\n    }\n  }; //logout user\n  // clear errors\n\n\n  const clearErrors = () => {\n    dispatch({\n      type: CLEAR_ERRORS\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(authContext.Provider, {\n    value: {\n      token: state.token,\n      isAuthentication: state.isAuthentication,\n      loading: state.loading,\n      user: state.user,\n      error: state.error,\n      register,\n      loadedUser,\n      clearErrors,\n      loadedUser,\n      Login\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthState, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = AuthState;\nexport default AuthState;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthState\");","map":{"version":3,"sources":["E:/Axoms course/Module B/Mern Stack Projects/contact-manager/client/src/context/auth/AuthState.js"],"names":["React","useReducer","axios","authContext","authReducer","setAuthToken","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","LOGIN_SUCCESS","LOGIN_FAIL","LOGINOUT","AUTH_ERROR","CLEAR_ERRORS","AuthState","props","initialState","token","localStorage","getItem","isAuthentication","loading","user","error","state","dispatch","register","formData","config","headers","res","post","type","payload","data","loadedUser","err","response","msg","get","Login","clearErrors","children"],"mappings":"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","sourcesContent":["import React, { useReducer } from 'react';\r\nimport axios from 'axios';\r\nimport authContext from './authContext';\r\nimport authReducer from './authReducer';\r\nimport setAuthToken from '../../utils/setAuthToken';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGINOUT,\r\n  AUTH_ERROR,\r\n  CLEAR_ERRORS,\r\n} from '../types';\r\n\r\nconst AuthState = (props) => {\r\n  const initialState = {\r\n    token: localStorage.getItem('token'),\r\n    //check the user login or not\r\n    isAuthentication: null,\r\n    // jb page loading hoga tu loading true our jab load ho jaya ga tu ladding false ho jay ga\r\n    loading: true,\r\n    // jis ko user ko hmna authenticate krna ha\r\n    user: null,\r\n    error: null,\r\n  };\r\n\r\n  const [state, dispatch] = useReducer(authReducer, initialState);\r\n  // Register Users\r\n  const register = async (formData) => {\r\n    //  we send a formData  in json format so we tell a axios we snd a json data so\r\n    // we define a config that contain the headers\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    try {\r\n      const res = await axios.post('/api/users', formData, config);\r\n      dispatch({ type: REGISTER_SUCCESS, payload: res.data });\r\n      loadedUser();\r\n    } catch (err) {\r\n      dispatch({ type: REGISTER_FAIL, payload: err.response.data.msg });\r\n    }\r\n  };\r\n  //loaded user\r\n  const loadedUser = async () => {\r\n    if (localStorage.token) {\r\n      setAuthToken(localStorage.token);\r\n    }\r\n    try {\r\n      const res = await axios.get('/api/auth');\r\n      dispatch({ type: USER_LOADED, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: AUTH_ERROR });\r\n    }\r\n  };\r\n  //login user\r\n\r\n  // Register Users\r\n  const Login = async (formData) => {\r\n    //  we send a formData  in json format so we tell a axios we snd a json data so\r\n    // we define a config that contain the headers\r\n    const config = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n    try {\r\n      const res = await axios.post('/api/auth', formData, config);\r\n      dispatch({ type: LOGIN_SUCCESS, payload: res.data });\r\n    } catch (err) {\r\n      dispatch({ type: LOGIN_FAIL, payload: err.response.data.msg });\r\n    }\r\n  };\r\n  //logout user\r\n  // clear errors\r\n  const clearErrors = () => {\r\n    dispatch({ type: CLEAR_ERRORS });\r\n  };\r\n\r\n  return (\r\n    <authContext.Provider\r\n      value={{\r\n        token: state.token,\r\n\r\n        isAuthentication: state.isAuthentication,\r\n\r\n        loading: state.loading,\r\n\r\n        user: state.user,\r\n        error: state.error,\r\n        register,\r\n        loadedUser,\r\n        clearErrors,\r\n        loadedUser,\r\n        Login,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </authContext.Provider>\r\n  );\r\n};\r\nexport default AuthState;\r\n"]},"metadata":{},"sourceType":"module"}